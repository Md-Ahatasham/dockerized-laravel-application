pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhublogin') // Replace with your Docker Hub credentials ID
        GIT_REPO_URL = 'https://github.com/Md-Ahatasham/dockerized-laravel-application.git' // Replace with your Git repository URL
        GIT_REPO_NAME = GIT_REPO_URL.split('/').last().replace('.git', '') // Extract the repository name from the URL
        DOCKER_HUB_USERNAME = 'ahatashamcsecu' // Replace with your Docker Hub username
        KUBE_CONFIG_PATH = '/home/dark/.kube/config' // Path to your kubeconfig file
        KUBE_CONFIG_ID = 'my-kubernetes'
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'feature/dockerize-app-with-nginx-from-remote-server-branch', description: 'Branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the specified branch
                    checkout scm: [$class: 'GitSCM', branches: [[name: "*/${params.BRANCH}"]],
                                   userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]]
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
//                      dir('docker/') {
                             // Get the short commit hash for tagging the image
                             def commitHash = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()

                             // Dynamically construct the Docker image name and tag
                             def imageTag = "${commitHash}-${env.BUILD_NUMBER}"
                             def dockerImage = "${DOCKER_HUB_USERNAME}/${GIT_REPO_NAME}:${imageTag}"

                             // Build the Docker image
                             def image = docker.build("${DOCKER_HUB_USERNAME}/${GIT_REPO_NAME}:${imageTag}", "-f ./docker/app/Dockerfile .")

                             // Save the image tag and name for use in later stages
                             env.IMAGE_TAG = imageTag
                             env.DOCKER_IMAGE = dockerImage
//                          }

                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
//                     docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS}") {
//                         def image = docker.image("${DOCKER_IMAGE}")
//                         image.push()
//                     }
                         withCredentials([usernamePassword(credentialsId: 'dockerhublogin', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                        // Log in to Docker Hub using the credentials
                        sh "echo ${DOCKER_HUB_PASS} | docker login -u ${DOCKER_HUB_USER} --password-stdin"

                        // Push the Docker image to Docker Hub
                        def image = docker.image("${DOCKER_IMAGE}")
                        image.push()

                    }

                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
//                 script {
//                     withKubeConfig([credentialsId: 'kubeconfig-cred', kubeConfigPath: "${KUBE_CONFIG_PATH}"]) {
//                        // Apply ConfigMap and Secret
//                                        sh """
//                                        kubectl apply -f deploy/kubernetes/configmap.yaml
//                                        kubectl apply -f deploy/kubernetes/secret.yaml
//                                        """
//
//                                        // Deploy the image to Minikube by updating the deployment with the new image
//                                        sh """
//                                        kubectl set image deployment/sham-laravel-app-deployment sham-laravel=${DOCKER_IMAGE} --record
//                                        kubectl rollout status deployment/sham-laravel-app-deployment
//                                        """
//                     }
//                 }

//                     script {
//                         // Use the secret file credential
//                         withCredentials([file(credentialsId: "my-kubernetes", variable: 'KUBE_CONFIG_FILE')]) {
//                             withEnv(["KUBECONFIG=${KUBE_CONFIG_FILE}"]) {
//                                 sh """
//                                 kubectl apply -f deploy/kubernetes/configmap.yaml
//                                 kubectl apply -f deploy/kubernetes/secret.yaml
//                                 kubectl set image deployment/sham-laravel-app-deployment sham-laravel=${DOCKER_IMAGE} --record
//                                 kubectl rollout status deployment/sham-laravel-app-deployment
//                                 """
//                             }
//                         }
//                     }
                        script {
                            withCredentials([file(credentialsId: "${KUBE_CONFIG_ID}", variable: 'KUBE_CONFIG_FILE')]) {
                                sh """
                                kubectl --kubeconfig=${KUBE_CONFIG_FILE} apply -f deploy/kubernetes/configmap.yaml
//                                 kubectl --kubeconfig=${KUBE_CONFIG_FILE} apply -f deploy/kubernetes/secret.yaml
                                kubectl --kubeconfig=${KUBE_CONFIG_FILE} set image deployment/sham-laravel-app-deployment sham-laravel=${DOCKER_IMAGE} --record
                                kubectl --kubeconfig=${KUBE_CONFIG_FILE} rollout status deployment/sham-laravel-app-deployment
                                """
                            }
                        }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
